api:
    name: "github"
    description: "GitHub Dataset from sql-clickhouse.clickhouse.com"
    version: "0.1"
database:
    type: clickhouse
    connection: clickhouse://sql-clickhouse.clickhouse.com:9440/github?username=demo&password=&secure=true
    endpoints:
        - group: actor_repo
          http_method: GET
          http_path: /actor_repo
          mcp_method: get_actor_repo_list
          summary: Retrieve paginated list of actor repository records
          description: 'This endpoint retrieves a list of actor repository records with details such as actor_login, repo_name, pushes, issues, and stars. Example: GET /actor_repo?offset=0&limit=10'
          query: SELECT actor_login, repo_name, pushes, issues, stars FROM actor_repo ORDER BY actor_login, repo_name LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: actor_repo
          http_method: GET
          http_path: /actor_repo/{actor_login}/{repo_name}
          mcp_method: get_actor_repo_by_id
          summary: Retrieve a specific actor repository record
          description: 'This endpoint retrieves the details of a specific actor repository record identified by actor_login and repo_name. Example: GET /actor_repo/Master-Hash/-/test'
          query: SELECT actor_login, repo_name, pushes, issues, stars FROM actor_repo WHERE actor_login = :actor_login AND repo_name = :repo_name LIMIT 1
          is_array_result: false
          params:
            - name: actor_login
              type: string
              location: path
              required: true
            - name: repo_name
              type: string
              location: path
              required: true
        - group: actor_repo
          http_method: GET
          http_path: /actor_repo/count
          mcp_method: get_actor_repo_count
          summary: Retrieve count of actor repository records
          description: 'This endpoint retrieves the total count of actor repository records for pagination purposes. Example: GET /actor_repo/count'
          query: SELECT count() as total_count FROM actor_repo
          is_array_result: false
          params: []
        - group: event_detail
          http_method: GET
          http_path: /event_detail
          mcp_method: get_event_detail_list
          summary: Retrieve paginated list of event details
          description: 'This endpoint retrieves detailed event records including event_type, actor_login, repo_name, created_at and other attributes. Example: GET /event_detail?offset=0&limit=10'
          query: SELECT file_time, event_type, actor_login, repo_name, repo_id, created_at, updated_at, action, comment_id, body, path, position, line, ref, ref_type, creator_user_login, number, title, labels, state, locked, assignee, assignees, comments, author_association, closed_at, merged_at, merge_commit_sha, requested_reviewers, requested_teams, head_ref, head_sha, base_ref, base_sha, merged, mergeable, rebaseable, mergeable_state, merged_by, review_comments, maintainer_can_modify, commits, additions, deletions, changed_files, diff_hunk, original_position, commit_id, original_commit_id, push_size, push_distinct_size, member_login, release_tag_name, release_name, review_state FROM event_detail ORDER BY created_at LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: event_detail
          http_method: GET
          http_path: /event_detail/{event_type}/{repo_name}/{created_at}
          mcp_method: get_event_detail_by_id
          summary: Retrieve a specific event detail record
          description: 'This endpoint retrieves a specific event detail record identified by event_type, repo_name, and created_at. Example: GET /event_detail/CommitCommentEvent/-/2011-02-12T02:22:00Z'
          query: SELECT file_time, event_type, actor_login, repo_name, repo_id, created_at, updated_at, action, comment_id, body, path, position, line, ref, ref_type, creator_user_login, number, title, labels, state, locked, assignee, assignees, comments, author_association, closed_at, merged_at, merge_commit_sha, requested_reviewers, requested_teams, head_ref, head_sha, base_ref, base_sha, merged, mergeable, rebaseable, mergeable_state, merged_by, review_comments, maintainer_can_modify, commits, additions, deletions, changed_files, diff_hunk, original_position, commit_id, original_commit_id, push_size, push_distinct_size, member_login, release_tag_name, release_name, review_state FROM event_detail WHERE event_type = :event_type AND repo_name = :repo_name AND created_at = :created_at LIMIT 1
          is_array_result: false
          params:
            - name: event_type
              type: string
              location: path
              required: true
            - name: repo_name
              type: string
              location: path
              required: true
            - name: created_at
              type: string
              location: path
              required: true
        - group: event_detail
          http_method: GET
          http_path: /event_detail/count
          mcp_method: get_event_detail_count
          summary: Retrieve total count of event detail records
          description: 'This endpoint returns the total count of event detail records. Example: GET /event_detail/count'
          query: SELECT count() as total_count FROM event_detail
          is_array_result: false
          params: []
        - group: event_detail_v2
          http_method: GET
          http_path: /event_detail_v2
          mcp_method: get_event_detail_v2_list
          summary: Retrieve paginated list of event detail v2 records
          description: 'This endpoint retrieves a list of event records from version 2 of event detail data. Example: GET /event_detail_v2?offset=0&limit=10'
          query: SELECT file_time, event_type, actor_login, repo_name, repo_id, created_at, updated_at, action, comment_id, body, path, position, line, ref, ref_type, creator_user_login, number, title, labels, state, locked, assignee, assignees, comments, author_association, closed_at, merged_at, merge_commit_sha, requested_reviewers, requested_teams, head_ref, head_sha, base_ref, base_sha, merged, mergeable, rebaseable, mergeable_state, merged_by, review_comments, maintainer_can_modify, commits, additions, deletions, changed_files, diff_hunk, original_position, commit_id, original_commit_id, push_size, push_distinct_size, member_login, release_tag_name, release_name, review_state FROM event_detail_v2 ORDER BY created_at LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: event_detail_v2
          http_method: GET
          http_path: /event_detail_v2/{event_type}/{repo_id}/{created_at}
          mcp_method: get_event_detail_v2_by_id
          summary: Retrieve a specific event detail v2 record
          description: 'This endpoint retrieves a specific event detail v2 record identified by event_type, repo_id, and created_at. Example: GET /event_detail_v2/CommitCommentEvent/399820861/2012-03-11T06:47:50Z'
          query: SELECT file_time, event_type, actor_login, repo_name, repo_id, created_at, updated_at, action, comment_id, body, path, position, line, ref, ref_type, creator_user_login, number, title, labels, state, locked, assignee, assignees, comments, author_association, closed_at, merged_at, merge_commit_sha, requested_reviewers, requested_teams, head_ref, head_sha, base_ref, base_sha, merged, mergeable, rebaseable, mergeable_state, merged_by, review_comments, maintainer_can_modify, commits, additions, deletions, changed_files, diff_hunk, original_position, commit_id, original_commit_id, push_size, push_distinct_size, member_login, release_tag_name, release_name, review_state FROM event_detail_v2 WHERE event_type = :event_type AND repo_id = :repo_id AND created_at = :created_at LIMIT 1
          is_array_result: false
          params:
            - name: event_type
              type: string
              location: path
              required: true
            - name: repo_id
              type: string
              location: path
              required: true
            - name: created_at
              type: string
              location: path
              required: true
        - group: event_detail_v2
          http_method: GET
          http_path: /event_detail_v2/count
          mcp_method: get_event_detail_v2_count
          summary: Get total count of event detail v2 records
          description: 'This endpoint returns the total count of event detail v2 records. Example: GET /event_detail_v2/count'
          query: SELECT count() as total_count FROM event_detail_v2
          is_array_result: false
          params: []
        - group: event_detail_v3
          http_method: GET
          http_path: /event_detail_v3
          mcp_method: get_event_detail_v3_list
          summary: Retrieve paginated list of event detail v3 records
          description: 'This endpoint retrieves a list of event detail records from version 3 of event data. Example: GET /event_detail_v3?offset=0&limit=10'
          query: SELECT file_time, event_type, actor_login, repo_name, repo_id, created_at, updated_at, action, comment_id, body, path, position, line, ref, ref_type, creator_user_login, number, title, labels, state, locked, assignee, assignees, comments, author_association, closed_at, merged_at, merge_commit_sha, requested_reviewers, requested_teams, head_ref, head_sha, base_ref, base_sha, merged, mergeable, rebaseable, mergeable_state, merged_by, review_comments, maintainer_can_modify, commits, additions, deletions, changed_files, diff_hunk, original_position, commit_id, original_commit_id, push_size, push_distinct_size, member_login, release_tag_name, release_name, review_state FROM event_detail_v3 ORDER BY created_at LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: event_detail_v3
          http_method: GET
          http_path: /event_detail_v3/{event_type}/{repo_name}/{created_at}
          mcp_method: get_event_detail_v3_by_id
          summary: Retrieve a specific event detail v3 record
          description: 'This endpoint retrieves a specific event detail v3 record identified by event_type, repo_name, and created_at. Example: GET /event_detail_v3/CommitCommentEvent/-/2011-02-12T02:22:00Z'
          query: SELECT file_time, event_type, actor_login, repo_name, repo_id, created_at, updated_at, action, comment_id, body, path, position, line, ref, ref_type, creator_user_login, number, title, labels, state, locked, assignee, assignees, comments, author_association, closed_at, merged_at, merge_commit_sha, requested_reviewers, requested_teams, head_ref, head_sha, base_ref, base_sha, merged, mergeable, rebaseable, mergeable_state, merged_by, review_comments, maintainer_can_modify, commits, additions, deletions, changed_files, diff_hunk, original_position, commit_id, original_commit_id, push_size, push_distinct_size, member_login, release_tag_name, release_name, review_state FROM event_detail_v3 WHERE event_type = :event_type AND repo_name = :repo_name AND created_at = :created_at LIMIT 1
          is_array_result: false
          params:
            - name: event_type
              type: string
              location: path
              required: true
            - name: repo_name
              type: string
              location: path
              required: true
            - name: created_at
              type: string
              location: path
              required: true
        - group: event_detail_v3
          http_method: GET
          http_path: /event_detail_v3/count
          mcp_method: get_event_detail_v3_count
          summary: Get total count of event detail v3 records
          description: 'This endpoint returns the total count of event detail v3 records. Example: GET /event_detail_v3/count'
          query: SELECT count() as total_count FROM event_detail_v3
          is_array_result: false
          params: []
        - group: event_light
          http_method: GET
          http_path: /event_light
          mcp_method: get_event_light_list
          summary: Retrieve paginated list of light event records
          description: 'This endpoint retrieves a list of events with minimal details (created_at, repo_name, event_type). Example: GET /event_light?offset=0&limit=10'
          query: SELECT created_at, repo_name, event_type FROM event_light ORDER BY created_at LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: event_light
          http_method: GET
          http_path: /event_light/count
          mcp_method: get_event_light_count
          summary: Retrieve total count of light event records
          description: 'This endpoint returns the total count of light event records. Example: GET /event_light/count'
          query: SELECT count() as total_count FROM event_light
          is_array_result: false
          params: []
        - group: max_date
          http_method: GET
          http_path: /max_date
          mcp_method: get_max_date_list
          summary: Retrieve paginated list of max_date records
          description: 'This endpoint retrieves max_date records. Example: GET /max_date?offset=0&limit=10'
          query: SELECT max_date FROM max_date ORDER BY max_date LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: max_date
          http_method: GET
          http_path: /max_date/count
          mcp_method: get_max_date_count
          summary: Retrieve count of max_date records
          description: 'This endpoint returns the total count of max_date records. Example: GET /max_date/count'
          query: SELECT count() as total_count FROM max_date
          is_array_result: false
          params: []
        - group: event_count
          http_method: GET
          http_path: /event_count
          mcp_method: get_event_count_list
          summary: Retrieve paginated list of event count records
          description: 'This endpoint retrieves event count records grouped by created_at, repo_name, and event_type. Example: GET /event_count?offset=0&limit=10'
          query: SELECT created_at, repo_name, event_type, count FROM event_count ORDER BY created_at LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: event_count
          http_method: GET
          http_path: /event_count/{created_at}/{repo_name}/{event_type}
          mcp_method: get_event_count_by_id
          summary: Retrieve a specific event count record
          description: 'This endpoint retrieves a specific event count record identified by created_at, repo_name, and event_type. Example: GET /event_count/2019-12-30T00:00:00Z/-/test/ForkEvent'
          query: SELECT created_at, repo_name, event_type, count FROM event_count WHERE created_at = :created_at AND repo_name = :repo_name AND event_type = :event_type LIMIT 1
          is_array_result: false
          params:
            - name: created_at
              type: string
              location: path
              required: true
            - name: repo_name
              type: string
              location: path
              required: true
            - name: event_type
              type: string
              location: path
              required: true
        - group: event_count
          http_method: GET
          http_path: /event_count/count
          mcp_method: get_event_count_count
          summary: Retrieve total count of event count records
          description: 'This endpoint returns the total count of event count records. Example: GET /event_count/count'
          query: SELECT count() as total_count FROM event_count
          is_array_result: false
          params: []
        - group: repo_mapping_int
          http_method: GET
          http_path: /repo_mapping_int
          mcp_method: get_repo_mapping_int_list
          summary: Retrieve paginated list of repository mappings (integer keys)
          description: 'This endpoint retrieves repository mapping records with integer repo_name and repo_id. Example: GET /repo_mapping_int?offset=0&limit=10'
          query: SELECT repo_name, repo_id FROM repo_mapping_int ORDER BY repo_name LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: repo_mapping_int
          http_method: GET
          http_path: /repo_mapping_int/{repo_name}
          mcp_method: get_repo_mapping_int_by_id
          summary: Retrieve a specific integer repository mapping record
          description: 'This endpoint retrieves a specific repository mapping record by repo_name. Example: GET /repo_mapping_int/12668838039'
          query: SELECT repo_name, repo_id FROM repo_mapping_int WHERE repo_name = :repo_name LIMIT 1
          is_array_result: false
          params:
            - name: repo_name
              type: number
              location: path
              required: true
        - group: repo_mapping_int
          http_method: GET
          http_path: /repo_mapping_int/count
          mcp_method: get_repo_mapping_int_count
          summary: Retrieve count of repository mappings (integer keys)
          description: 'This endpoint returns the total count of repository mapping records. Example: GET /repo_mapping_int/count'
          query: SELECT count() as total_count FROM repo_mapping_int
          is_array_result: false
          params: []
        - group: repo_mapping_big
          http_method: GET
          http_path: /repo_mapping_big
          mcp_method: get_repo_mapping_big_list
          summary: Retrieve paginated list of repository mappings (big integers)
          description: 'This endpoint retrieves repository mapping records with big integer repo_name values and repo_id. Example: GET /repo_mapping_big?offset=0&limit=10'
          query: SELECT repo_name, repo_id FROM repo_mapping_big ORDER BY repo_name LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: repo_mapping_big
          http_method: GET
          http_path: /repo_mapping_big/{repo_name}
          mcp_method: get_repo_mapping_big_by_id
          summary: Retrieve a specific repository mapping record (big) by repo_name
          description: 'This endpoint retrieves a specific repository mapping record by repo_name for big integer values. Example: GET /repo_mapping_big/16635104792794881497'
          query: SELECT repo_name, repo_id FROM repo_mapping_big WHERE repo_name = :repo_name LIMIT 1
          is_array_result: false
          params:
            - name: repo_name
              type: number
              location: path
              required: true
        - group: repo_mapping_big
          http_method: GET
          http_path: /repo_mapping_big/count
          mcp_method: get_repo_mapping_big_count
          summary: Retrieve count of repository mapping records (big)
          description: 'This endpoint returns the total count of repository mapping records in the big integer group. Example: GET /repo_mapping_big/count'
          query: SELECT count() as total_count FROM repo_mapping_big
          is_array_result: false
          params: []
        - group: repo_mapping_str
          http_method: GET
          http_path: /repo_mapping_str
          mcp_method: get_repo_mapping_str_list
          summary: Retrieve paginated list of repository mappings (string keys)
          description: 'This endpoint retrieves repository mapping records with string repo_name and repo_id. Example: GET /repo_mapping_str?offset=0&limit=10'
          query: SELECT repo_name, repo_id FROM repo_mapping_str ORDER BY repo_name LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: repo_mapping_str
          http_method: GET
          http_path: /repo_mapping_str/{repo_name}
          mcp_method: get_repo_mapping_str_by_id
          summary: Retrieve a specific repository mapping record (string) by repo_name
          description: 'This endpoint retrieves a specific repository mapping record by repo_name for string keys. Example: GET /repo_mapping_str/-/test'
          query: SELECT repo_name, repo_id FROM repo_mapping_str WHERE repo_name = :repo_name LIMIT 1
          is_array_result: false
          params:
            - name: repo_name
              type: string
              location: path
              required: true
        - group: repo_mapping_str
          http_method: GET
          http_path: /repo_mapping_str/count
          mcp_method: get_repo_mapping_str_count
          summary: Retrieve count of repository mapping records (string)
          description: 'This endpoint returns the total count of repository mapping records with string keys. Example: GET /repo_mapping_str/count'
          query: SELECT count() as total_count FROM repo_mapping_str
          is_array_result: false
          params: []
        - group: repo_count
          http_method: GET
          http_path: /repo_count
          mcp_method: get_repo_count_list
          summary: Retrieve paginated list of repository count records
          description: 'This endpoint retrieves repository count records indicating the number of occurrences for each repo_name. Example: GET /repo_count?offset=0&limit=10'
          query: SELECT repo_name, count FROM repo_count ORDER BY repo_name LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: repo_count
          http_method: GET
          http_path: /repo_count/{repo_name}
          mcp_method: get_repo_count_by_id
          summary: Retrieve a specific repository count record
          description: 'This endpoint retrieves the count record for a specific repository identified by repo_name. Example: GET /repo_count/-/test'
          query: SELECT repo_name, count FROM repo_count WHERE repo_name = :repo_name LIMIT 1
          is_array_result: false
          params:
            - name: repo_name
              type: string
              location: path
              required: true
        - group: repo_count
          http_method: GET
          http_path: /repo_count/count
          mcp_method: get_repo_count_count
          summary: Retrieve total count of repository count records
          description: 'This endpoint returns the total count of repository count records. Example: GET /repo_count/count'
          query: SELECT count() as total_count FROM repo_count
          is_array_result: false
          params: []
        - group: actor_stats
          http_method: GET
          http_path: /actor_stats
          mcp_method: get_actor_stats_list
          summary: Retrieve paginated list of actor statistics records
          description: 'This endpoint retrieves actor statistics records including actor_login, pushes, repos, repo_issues, stars, and repo. Example: GET /actor_stats?offset=0&limit=10'
          query: SELECT actor_login, pushes, repos, repo_issues, stars, repo FROM actor_stats ORDER BY pushes LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: actor_stats
          http_method: GET
          http_path: /actor_stats/{pushes}
          mcp_method: get_actor_stats_by_id
          summary: Retrieve actor statistics record by pushes value
          description: 'This endpoint retrieves a specific actor statistics record identified by the unique pushes value. Example: GET /actor_stats/15061'
          query: SELECT actor_login, pushes, repos, repo_issues, stars, repo FROM actor_stats WHERE pushes = :pushes LIMIT 1
          is_array_result: false
          params:
            - name: pushes
              type: number
              location: path
              required: true
        - group: repo_stars
          http_method: GET
          http_path: /repo_stars
          mcp_method: get_repo_stars_list
          summary: Retrieve paginated list of repository stars records
          description: 'This endpoint retrieves repository stars records showing how many stars each repository has. Example: GET /repo_stars?offset=0&limit=10'
          query: SELECT repo_name, stars FROM repo_stars ORDER BY repo_name LIMIT :limit OFFSET :offset
          is_array_result: true
          params:
            - name: offset
              type: number
              location: query
              required: false
              default: 0
            - name: limit
              type: number
              location: query
              required: false
              default: 10
        - group: repo_stars
          http_method: GET
          http_path: /repo_stars/{repo_name}
          mcp_method: get_repo_stars_by_id
          summary: Retrieve a specific repository stars record
          description: 'This endpoint retrieves the stars count for a specific repository identified by repo_name. Example: GET /repo_stars/bfu4/a'
          query: SELECT repo_name, stars FROM repo_stars WHERE repo_name = :repo_name LIMIT 1
          is_array_result: false
          params:
            - name: repo_name
              type: string
              location: path
              required: true
        - group: repo_stars
          http_method: GET
          http_path: /repo_stars/count
          mcp_method: get_repo_stars_count
          summary: Retrieve count of repository stars records
          description: 'This endpoint returns the total count of repository stars records. Example: GET /repo_stars/count'
          query: SELECT count() as total_count FROM repo_stars
          is_array_result: false
          params: []
    tables: []
plugins: {}
