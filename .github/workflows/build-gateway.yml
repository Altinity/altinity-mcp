name: Build Gateway

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/gateway

jobs:
  build-and-push-platforms:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clone gateway repository
      run: |
        git clone --branch add_cors_to_sse https://github.com/Slach/gateway.git /tmp/gateway
        # git clone https://github.com/centralmind/gateway.git /tmp/gateway

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

    - name: Build binary for ${{ matrix.platform }}
      run: |
        cd /tmp/gateway
        if [ "${{ matrix.platform }}" = "arm64" ]; then
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o gateway .
        else
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o gateway .
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push platform image
      run: |
        cd /tmp/gateway
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        docker buildx build --platform linux/${{ matrix.platform }} --push -t ${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${{ matrix.platform }}-${SHORT_SHA} .

  create-multiplatform-manifest:
    needs: build-and-push-platforms
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Set image name to lowercase
      id: image-name
      run: |
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        echo "image_name_lower=${IMAGE_NAME_LOWER}" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.image_name_lower }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag,pattern={{version}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

    - name: Create and push multiplatform manifest
      run: |
        # Create and push multiplatform manifest
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_NAME_LOWER="${{ steps.image-name.outputs.image_name_lower }}"
        
        # Convert tags to array and iterate
        echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
          if [ -n "$tag" ]; then
            echo "Creating manifest for tag: $tag"
            docker buildx imagetools create \
              --tag "$tag" \
              "${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:amd64-${SHORT_SHA}" \
              "${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:arm64-${SHORT_SHA}"
          fi
        done
