name: Build Gateway

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/gateway

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-latest-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest-amd64: ${{ matrix.platform == 'linux/amd64' && steps.build.outputs.digest || '' }}
      image-digest-arm64: ${{ matrix.platform == 'linux/arm64' && steps.build.outputs.digest || '' }}
      metadata: ${{ matrix.platform == 'linux/amd64' && steps.meta.outputs.json || '' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clone gateway repository
      run: |
        git clone --branch add_cors_to_sse https://github.com/Slach/gateway.git /tmp/gateway
        # git clone https://github.com/centralmind/gateway.git /tmp/gateway

    - name: Remove TARGETARCH default from Dockerfile.build
      run: |
        sed -i '/^ARG TARGETARCH=amd64$/d' /tmp/gateway/Dockerfile.build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Extract metadata
      id: meta
      if: matrix.platform == 'linux/amd64'
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag,pattern={{version}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

    - name: Build and push image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: /tmp/gateway
        file: /tmp/gateway/Dockerfile.build
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ matrix.platform == 'linux/amd64' && steps.meta.outputs.tags || '' }}
        labels: ${{ matrix.platform == 'linux/amd64' && steps.meta.outputs.labels || steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true

  merge:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Create manifest list and push
      working-directory: /tmp
      run: |
        # Parse metadata from build job
        METADATA='${{ needs.build.outputs.metadata }}'
        TAGS=$(echo "$METADATA" | jq -r '.tags[]')
        
        # Get digests from matrix outputs
        AMD64_DIGEST="${{ needs.build.outputs.image-digest-amd64 }}"
        ARM64_DIGEST="${{ needs.build.outputs.image-digest-arm64 }}"
        
        # Create manifest for each tag
        for tag in $TAGS; do
          docker buildx imagetools create \
            --tag $tag \
            $AMD64_DIGEST \
            $ARM64_DIGEST
        done
